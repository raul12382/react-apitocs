{"version":3,"sources":["components/form.js","apiFacil/index.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","APIForm","props","Form","useForm","form","useState","setImage_category","image_category2","setImage_category2","information","setInformation","visible","setVisible","confirmLoading","setConfirmLoading","setModalText","dtype","setdtype","tokenFront","setTokenFront","tokenBack","setTokenBack","tokenliveness","setTokenLiveness","hidden","setHidden","divAutocaptureBack","useHistory","values","a","getSessionId","sessionId","console","log","autocapture","window","TOCautocapture","locale","session_id","document_type","document_side","http","callback","captured_token","image","token_imag","image64","failure","error","alert","divAutocaptureFront","imgFront","divLiveness","TOCliveness","token","cols","padding","axios","get","response","data","onFinish","formData","FormData","append","post","mrz","layout","lg","xs","style","className","placeholder","onChange","value","type","onClick","alignItems","Item","marginTop","marginLeft","htmlType","title","onOk","setTimeout","onCancel","name","nationality","gender","width","source","uri","id","Index","height","src","alt","to","marginBottom","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.48222427.chunk.js","sourcesContent":["import {Button, Col, Form, Input, Row, Select, Switch, message, Modal, Image} from \"antd\";\r\nimport React, {useEffect, useState, useRef} from \"react\";\r\nimport {ReactDOM, useHistory} from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport styles from '../App.css';\r\nimport SelectD from '../components/doom';\r\nconst {Option} = Select;\r\n\r\nconst APIForm  = (props) => {\r\n    const [form] = Form.useForm();\r\n    const [image_category, setImage_category] = useState(\"\");\r\n    const [image_category2, setImage_category2] = useState('');\r\n    const [image_category3, setImage_category3] = useState('');\r\n    const [information, setInformation] = useState({});\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [modalText, setModalText] = useState('');\r\n    const [dtype, setdtype] = useState(\"\"); \r\n    const [tokenFront, setTokenFront] = useState(\"\")\r\n    const [tokenBack, setTokenBack] = useState(\"\")\r\n    const [tokenliveness, setTokenLiveness] = useState(\"\")\r\n    const [hidden, setHidden] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const onChange = (value) =>{\r\n        const a = value\r\n        setdtype(a)\r\n        setHidden(true)\r\n        console.log(dtype)\r\n    }\r\n\r\n\r\n    const divAutocaptureBack = async (values) =>{\r\n        const sessionId = await getSessionId();\r\n        console.log('Session id', sessionId)\r\n\r\n       const autocapture = window.TOCautocapture;\r\n        const TOCautocapture = autocapture;\r\n\r\n        TOCautocapture('container', {\r\n                locale: \"es\",\r\n                session_id: sessionId,\r\n               document_type: dtype,\r\n               document_side: \"back\",\r\n               http: true,\r\n           callback: function(captured_token, image){ \r\n            const token_imag = captured_token\r\n            const image64 = image\r\n            console.log(captured_token)   \r\n            setTokenBack(token_imag)\r\n            setImage_category(image64)\r\n        },\r\n           failure: function(error){ alert(error); }    \r\n       }) \r\n    } \r\n\r\n    const divAutocaptureFront = async (values) =>{\r\n        console.log(dtype)\r\n        const sessionId = await getSessionId();\r\n        console.log('Session id', sessionId)\r\n\r\n       const autocapture = window.TOCautocapture;\r\n        const TOCautocapture = autocapture;\r\n\r\n        TOCautocapture('containerfront', {\r\n                locale: \"es\",\r\n                session_id: sessionId,\r\n               document_type: dtype,\r\n               document_side: \"front\",\r\n               http: true,\r\n           callback: function(captured_token, image){ \r\n            console.log(image)  \r\n            const imgFront = image \r\n            const tokenF = captured_token\r\n            setTokenFront(tokenF)\r\n            setImage_category2(imgFront)\r\n        },\r\n           failure: function(error){ alert(error); }    \r\n       }) \r\n    } \r\n\r\n    const divLiveness = async (values) =>{\r\n        const sessionId = await getSessionId();\r\n        console.log('Session id', sessionId)\r\n\r\n       const autocapture = window.TOCliveness ;\r\n        const TOCliveness  = autocapture;\r\n\r\n        TOCliveness ('liveness', {\r\n        locale: \"es\",\r\n        session_id: sessionId,\r\n        http: true,\r\n        callback: function(token){ \r\n        const tl= token  \r\n        setTokenLiveness(tl)},\r\n        failure: function(error){ alert(error); }       \r\n       }) \r\n    } \r\n\r\n    const showModal = () => {\r\n        setVisible(true);\r\n    };\r\n    const handleOk = () => {\r\n        setModalText('El modal se cerrara en dos segundos');\r\n        setConfirmLoading(true);\r\n        setTimeout(() => {\r\n          setVisible(false);\r\n          setConfirmLoading(false);\r\n        }, 2000);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        console.log('Clicked cancel button');\r\n        setVisible(false);\r\n      };\r\n\r\n    const cols = {\r\n        padding: 10\r\n    };\r\n\r\n    function beforeUpload(file) {\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n        if (!isJpgOrPng) {\r\n            message.error('You can only upload JPG/PNG file!');\r\n        }\r\n    \r\n        return isJpgOrPng;\r\n    }\r\n\r\n\r\n\r\n    const updateImage = (e) => {\r\n        setImage_category({object: e.target.files[0], url: URL.createObjectURL(e.target.files[0])})\r\n    };\r\n    const updateImage2 = (e) => {\r\n        setImage_category2({object: e.target.files[0], url: URL.createObjectURL(e.target.files[0])})\r\n    };\r\n    const updateImage3 = (e) => {\r\n        setImage_category3({object: e.target.files[0], url: URL.createObjectURL(e.target.files[0])})\r\n    };\r\n\r\n    const getSessionId = async () => {\r\n        try{\r\n            const response = await axios.get('http://localhost:3001/users')\r\n            console.log('Session id response', response)\r\n            return response.data.session_id;\r\n        }catch(err){\r\n            console.log('Error al obtener sesión', err)\r\n        }\r\n    }\r\n\r\n    const apiKey = '433a8e1ed0dc4495974a9f95018eed8f' \r\n    const onFinish = async (values) => {\r\n\r\n        let formData = new FormData();\r\n        formData.append('id_front',tokenFront )\r\n        formData.append('id_back',tokenBack )\r\n        formData.append('selfie', tokenliveness)\r\n        formData.append('apiKey', apiKey) \r\n        formData.append('documentType', \"MEX2\")\r\n        //const response = await axios.post(`https://sandbox-api.7oc.cl/v2/face-and-document`, formData)\r\n        const response = await axios.post(`https://sandbox-api.7oc.cl/v2/face-and-document`, formData)\r\n            setInformation(response.data[\"information from document\"].mrz.data)\r\n        return response\r\n    }\r\n\r\n    return (\r\n\r\n        <Form\r\n            layout={'horizontal'}\r\n            form={form}\r\n            onFinish={onFinish}\r\n        >\r\n            <Row>\r\n                <Col lg={12} xs={24} style={cols} hidden={hidden} className=\"text-center\">\r\n                        <Select  placeholder=\"Selecciona el tipo de documento\" onChange={onChange}>\r\n                            <Option value=\"MEX1\">MEX1</Option>\r\n                            <Option value=\"MEX2\">MEX2</Option>\r\n                            <Option value=\"MEX3\">MEX3</Option>\r\n\r\n                        </Select>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={12} xs={24} style={cols}  className=\"text-center\">\r\n                <div>\r\n                    <label className=\"text-center text-primary font-weight-bold\">Captura</label>\r\n                </div>\r\n                <Button type=\"primary\" onClick={divAutocaptureFront}>INE Frontal\r\n                </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={12} xs={24} style={cols}  className=\"text-center\">\r\n                    <div>\r\n                    <label className=\"text-center text-primary font-weight-bold\">Captura</label>\r\n                    </div>\r\n                    <Button type=\"primary\" onClick={divAutocaptureBack}>INE Posterior\r\n                    </Button>\r\n                </Col></Row>\r\n\r\n            <Row>\r\n                <Col lg={12} xs={24} style={cols} className=\"text-center\" >\r\n                    <div>\r\n                    <label className=\"text-center text-primary font-weight-bold\">Captura</label>\r\n                    </div>\r\n                    <Button type=\"primary\" onClick={divLiveness}>Liveness\r\n                    </Button>\r\n                </Col></Row>\r\n            <Row>\r\n                <Col lg={24} xs={24} className=\"text-center\" style={{ alignItems: \"center\" }}>\r\n                    <Form.Item style={{ marginTop: 10, marginLeft:20 }}>\r\n                        <Button type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"text-light\"\r\n                                type=\"primary\">\r\n                                Enviar\r\n                        </Button>\r\n                        <Button style={{marginLeft: 20}} type=\"primary\" onClick={showModal}>\r\n                        informacion escaneada \r\n                        </Button>\r\n                        \r\n                        <Modal\r\n                            title=\"informacion escaneada \"\r\n                            visible={visible}\r\n                            onOk={handleOk}\r\n                            confirmLoading={confirmLoading}\r\n                            onCancel={handleCancel}\r\n                        >\r\n                            <p>Apellidos Paternos: {information[\"family name\"] ? information[\"family name\"] : \"Documento sin escanear\"}</p>\r\n                            <br/>\r\n                            <p>Nombre Completo: {information.name ?  information.name : \"Documento sin escanear\"}</p>\r\n                            <br/>\r\n                            <p>Nacionalidad: {information.nationality ? information.nationality : \"Documento sin escanear\"}</p>\r\n                            <br/>\r\n                            <p>Genero: {information.gender ? information.gender : \"Documento sin escanear\"}</p>\r\n                            <br/>\r\n                            <p>Fecha Expiración: {information[\"expiration date\"] ? information[\"expiration date\"] : \"Documento sin escanear\"}</p>\r\n                            <br/>\r\n                            <p>Numero de documento: {information[\"document number\"] ? information[\"document number\"] : \"Documento sin escanear\"}</p>\r\n                            <br/>\r\n                            <p>Fecha Nacimiento: {information[\"date of birth\"] ? information[\"date of birth\"] : \"Documento sin escanear\"}</p>\r\n                            <Image style={{width:20}} source={{uri:image_category2}}/>\r\n                        </Modal>\r\n                    </Form.Item>\r\n                </Col>\r\n                    {dtype}\r\n                \r\n            </Row>\r\n            <div className=\"container-lg\" id=\"containerfront\">\r\n            </div>\r\n            <div id=\"container\">\r\n            </div>\r\n            <div id=\"liveness\">\r\n            </div>\r\n                               \r\n        </Form>\r\n\r\n        \r\n    );\r\n}\r\n\r\n\r\n\r\nexport default APIForm;\r\n","import React from 'react'\r\nimport { \r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n\r\n} from \"react-router-dom\";\r\n\r\nfunction Index() {\r\n\r\n\r\n    return (\r\n        <div className=\"card pl-6\" >\r\n            <img className=\"card-img-top text-align:center\" style={{marginTop:20}} width={20} height={45} src=\"https://dev-web-plugins.s3.amazonaws.com/demo-toc-ci/static/logo_toc.svg\" alt=\"Card image cap\"/>\r\n            <div className=\"card-body\">\r\n            <p className=\"card-text font-weight-bold text-center\">¡Te damos la bienvenida a la Demo de TOC Biometrics!</p>\r\n            </div >\r\n            <Link to=\"/Form\">\r\n            <div className=\"text-center \">\r\n                <button className=\"card-btn border border border-primary rounded cardtext-align:center\" style={{marginBottom: 20}}>\r\n                        <img src=\"https://dev-web-plugins.s3.amazonaws.com/demo-toc-ci/static/onboarding.svg\"/>\r\n                </button>\r\n            </div>\r\n            <p className=\"card-text font-weight-bold text-center\">Onboarding</p>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index\r\n","import React from 'react';\nimport styles from './App.css';\nimport Form from './components/form';\nimport Api_Facial from \"./apiFacil/index\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { DatePicker } from \"antd\"\nimport 'antd/dist/antd.css'\nimport Select from '../src/components/doom';\n//import Session from \"./session/session\";\n//mport Autocapture from './AutoCaptura/autocapturecamera';\n\nimport { \n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n\n} from \"react-router-dom\";\n\nfunction App() {\n \n  return (\n  /*  <Router>\n    <Api_Facial/>\n    <Route path=\"/Form\" exact component={Form}/>\n    </Router> */\n     <Router>\n       <Api_Facial/>\n      <Route path=\"/Form\" exact component={Form}/>\n    </Router> \n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}